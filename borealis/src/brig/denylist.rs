use sailrs::{
    jib_ast::{self, Definition, Instruction, InstructionAux, Type, Value, Vl},
    sail_ast::Location,
    types::ListVec,
};

pub fn apply_fn_denylist<I: Iterator<Item = jib_ast::Definition>>(
    iter: I,
) -> impl Iterator<Item = jib_ast::Definition> {
    iter.map(|def| {
        if let Definition::Fundef(name, idk, arguments, body) = def {
            let body = if !DENYLIST.contains(&name.as_interned().as_ref()) {
                body
            } else {
                ListVec::from(vec![Instruction {
                    inner: InstructionAux::Throw(Value::Lit(Vl::Unit, Type::Unit)),
                    annot: (0, Location::Unknown),
                }])
            };

            Definition::Fundef(name, idk, arguments, body)
        } else {
            def
        }
    })
}

const DENYLIST: &[&'static str] = &[
    "neq_bool",
    "_shl_int_general",
    "_shr_int_general",
    "fmod_int",
    "reverse_endianness",
    "subrange_subrange_eq",
    "subrange_subrange_concat",
    "zext_slice",
    "zext_subrange",
    "sext_slice",
    "sext_subrange",
    "place_slice_signed",
    "place_subrange_signed",
    "unsigned_subrange",
    "vector_update_subrange_from_subrange",
    "vector_update_subrange_from_integer_subrange",
    "mem_read_request_is_exclusive<Uarm_acc_type<>,b,O<RTranslationInfo>>",
    "mem_read_request_is_ifetch<Uarm_acc_type<>,b,O<RTranslationInfo>>",
    "mem_write_request_is_exclusive<Uarm_acc_type<>,b,O<RTranslationInfo>>",
    "implies",
    "Replicate__1",
    "Ones",
    "IsOnes",
    "integer_access",
    "integer_update_subrange",
    "ZeroExtend1",
    "Slice_int",
    "Align_int",
    "Align_bits",
    "RoundTowardsZero",
    "IsUNDEFINED",
    "IsUNPREDICTABLE",
    "IsSEE",
    "IsExceptionTaken",
    "ThrowSError",
    "ReservedEncoding",
    "__UNKNOWN_integer",
    "__UNKNOWN_bit",
    "EncodingSpecificOperations",
    "LSL_C",
    "LSR_C",
    "ASR_C",
    "ROR_C",
    "asl_Int",
    "Elem_read",
    "num_of_ArchVersion",
    "InitFeatureImpl",
    "InitVariantImplemented",
    "write_gpr_bits",
    "set_R_bits",
    "HaveStatisticalProfilingv1p2",
    "FPCR_read",
    "FPSCR_read__1",
    "FPSCR_read",
    "ExternalInvasiveDebugEnabled",
    "HaveNoninvasiveDebugAuth",
    "ExternalNoninvasiveDebugEnabled",
    "ExternalSecureInvasiveDebugEnabled",
    "ExternalSecureNoninvasiveDebugEnabled",
    "PMCR_read",
    "PMINTENCLR_read",
    "PMOVSR_read",
    "PMUCounterIsHyp",
    "PMUOverflowCondition",
    "HiLoPMUOverflow",
    "PMCCFILTR_read",
    "PMCNTENSET_read",
    "PMEVTYPER_read",
    "SDER32_EL3_read",
    "SDER_read",
    "CountPMUEvents",
    "IncrementInstructionCounter",
    "HaveStatisticalProfilingv1p1",
    "HaveStatisticalProfilingv1p4",
    "SPEEvent",
    "PMUEvent",
    "PMUEvent__1",
    "PMUEvent__2",
    "HasElapsed64Cycles",
    "HavePMUv3EDGE",
    "HavePMUv3TH",
    "PMUCountValue",
    "HaveECVExt",
    "BRBETimeStamp",
    "PhysicalCountInt",
    "EffectiveSCR_EL3_RW",
    "PhysicalOffsetIsValid",
    "GetTimestamp",
    "BRBEFreeze",
    "DLR_write",
    "DSPSR_write",
    "DSPSR2_write",
    "EDSCR_write",
    "ExternalRealmInvasiveDebugEnabled",
    "ExternalRootInvasiveDebugEnabled",
    "HaveBRBEv1p1",
    "BranchRecordAllowed",
    "ELIsInHost",
    "S1TranslationRegime__1",
    "IsInHost",
    "BRBEMispredictAllowed",
    "BRBCycleCountingEnabled",
    "BranchRawCycleCount",
    "FirstBranchAfterProhibited",
    "BranchEncCycleCount",
    "BranchMispredict",
    "FilterBranchRecord",
    "CurrentInstrSet",
    "BadMode",
    "RBankSelect",
    "LookUpRIndex",
    "Rmode_read",
    "R_read",
    "PC_read__1",
    "GetBRBENumRecords",
    "UpdateBranchRecordBuffer",
    "BRBEBranch",
    "ProfilingBufferOwner",
    "ProfilingBufferEnabled",
    "StatisticalProfilingEnabled",
    "StatisticalProfilingEnabled__1",
    "SPEBranch",
    "SPEBranch__1",
    "FloorPow2",
    "CeilPow2",
    "IsPow2",
    "ImplementedSVEVectorLength",
    "CurrentNSVL_read",
    "ImplementedSMEVectorLength",
    "CurrentSVL_read",
    "HaveSME",
    "CurrentVL_read",
    "CPACR_read__1",
    "HCPTR_read",
    "IsFPEnabled",
    "HaveSVE",
    "IsOriginalSVEEnabled",
    "IsSMEEnabled",
    "IsSVEEnabled",
    "RestoreTransactionCheckpointParameterised",
    "RestoreTransactionCheckpoint",
    "FailTransaction",
    "FailTransaction__1",
    "GetPSRFromPSTATE",
    "Havev8p9Debug",
    "ThisInstrAddr",
    "UpdateEDSCRFields",
    "Halt",
    "Halt__1",
    "ShouldBRBEFreeze",
    "CheckForPMUOverflow",
    "IsAligned__1",
    "Split",
    "RShr",
    "NonSecureOnlyImplementation",
    "DBGOSLSR_read",
    "TranslationRegime",
    "AlignmentEnforced",
    "CPASAtPAS",
    "CPASAtSecurityState",
    "ICInstNeedsTranslation",
    "DCInstNeedsTranslation",
    "DecodeSW",
    "HaveCRCExt",
    "BitReverse",
    "Poly32Mod2",
    "HaveAESExt",
    "HaveBit128PMULLExt",
    "HaveSHA1Ext",
    "HaveSHA256Ext",
    "HaveSHA512Ext",
    "HaveSHA3Ext",
    "HaveSM3Ext",
    "HaveSM4Ext",
    "ROL",
    "AESShiftRows",
    "AESInvShiftRows",
    "AESSubBytes",
    "AESInvSubBytes",
    "FFmul02",
    "FFmul03",
    "FFmul09",
    "FFmul0B",
    "FFmul0D",
    "FFmul0E",
    "AESMixColumns",
    "AESInvMixColumns",
    "SHAchoose",
    "SHAparity",
    "SHAmajority",
    "SHAhashSIGMA0",
    "SHAhashSIGMA1",
    "SHA256hash",
    "Sbox",
    "TargetSecurityState",
    "RESTRICT_PREDICTIONS",
    "TTBCR_NS_read",
    "TTBCR_read",
    "EAEisOne",
    "CONTEXTIDR_NS_read",
    "CONTEXTIDR_read",
    "TTBR0_read",
    "TTBR0_EL1_read",
    "TTBR0_EL2_read",
    "TTBR1_read",
    "TTBR1_EL1_read",
    "ASID_read",
    "RecipEstimate",
    "UnsignedRecipEstimate",
    "RecipSqrtEstimate",
    "UnsignedRSqrtEstimate",
    "SignedSatQ",
    "UnsignedSatQ",
    "SatQ",
    "AdvSIMDExpandImm",
    "PolynomialMult",
    "MatMulAdd",
    "HaveRASExt",
    "IsExternalSyncAbort",
    "IsExternalSyncAbort__1",
    "HandleExternalTTWAbort",
    "Have52BitIPAAndPASpaceExt",
    "Have56BitPAExt",
    "HaveMTE2Ext",
    "EncodeLDFSC",
    "IsAsyncAbort",
    "IsAsyncAbort__1",
    "IsExternalAbort",
    "IsExternalAbort__1",
    "IsSecondStage",
    "IPAValid",
    "HDFAR_write",
    "HIFAR_write",
    "HPFAR_read",
    "HPFAR_write",
    "HSR_write",
    "ELR_hyp_write",
    "HVBAR_read",
    "ExcVectorBase",
    "EncodeSDFSC",
    "DFAR_NS_write",
    "HDFAR_read",
    "DFAR_S_write",
    "DFAR_write",
    "DFSR_NS_write",
    "DFSR_write",
    "IFSR_NS_write",
    "IFSR_write",
    "DBGDSCRint_read",
    "DBGDSCRext_read",
    "DBGDSCRint_write",
    "DBGDSCRext_write",
    "HCR2_read",
    "IsDebugException",
    "IFAR_NS_write",
    "HIFAR_read",
    "IFAR_S_write",
    "IFAR_write",
    "ExtAbortToA64",
    "HaveFeatLS64",
    "HaveDoubleFault2Ext",
    "HaveFeatSCTLR2",
    "IsSCTLR2EL1Enabled",
    "IsSCTLR2EL2Enabled",
    "ReportAsGPCException",
    "EncodeGPCSC",
    "HaveAccessFlagUpdateExt",
    "HaveAtomicExt",
    "HaveDirtyBitModifierExt",
    "TakeGPCException",
    "GPCNoFault",
    "NoFault",
    "NoFault__1",
    "HandleExternalAbort",
    "HandleExternalReadAbort",
    "HandleExternalWriteAbort",
    "HCR_write",
    "ClearPendingVirtualSError",
    "IsSErrorEdgeTriggered",
    "FPInfinity",
    "FPMaxNormal",
    "FPEXC_read",
    "FPEXC_write",
    "FPSCR_write",
    "HaveSMEFullA64",
    "IsFullA64Enabled",
    "FPProcessException",
    "FPZero",
    "HaveAltFP",
    "FPRoundBase__1",
    "FPDecodeRounding",
    "FPRoundingMode",
    "FPRound",
    "FPRound__1",
    "FPRound__2",
    "FixedToFP",
    "FPUnpackBase",
    "FPUnpackBase__1",
    "FPUnpack",
    "FPUnpack__1",
    "FPAbs",
    "FPDefaultNaN",
    "FPDefaultNaN__1",
    "FPProcessDenorms",
    "FPProcessNaN",
    "FPProcessNaN__1",
    "FPProcessNaNs",
    "FPProcessNaNs__1",
    "FPAdd",
    "FPAdd__1",
    "FPAdd_ZA",
    "FPCompare",
    "FPCompareEQ",
    "FPCompareGE",
    "FPCompareGT",
    "FPConvertNaN",
    "FPProcessDenorm",
    "FPRoundCV",
    "FPUnpackCV",
    "FPConvert",
    "FPConvert__1",
    "FPDecodeRM",
    "FPDiv",
    "FPMax",
    "FPMax__1",
    "FPMaxNum",
    "IsMerging",
    "FPMin",
    "FPMin__1",
    "FPMinNum",
    "FPMul",
    "FPProcessDenorms3",
    "FPProcessNaNs3__1",
    "FPMulAdd",
    "FPMulAdd__1",
    "FPMulAdd_ZA",
    "FPTwo",
    "FPMulX",
    "FPProcessNaNs3H",
    "FPMulAddH",
    "FPMulAddH__1",
    "FPMulAddH_ZA",
    "FPNeg",
    "FPOnePointFive",
    "HaveFeatRPRES",
    "FPRecipEstimate",
    "FPRecpX",
    "FPRoundInt",
    "FPRoundIntN",
    "FPRSqrtEstimate",
    "FPSqrt",
    "FPSub",
    "FPSub__1",
    "FPSub_ZA",
    "FPThree",
    "FPToFixed",
    "FPToFixedJS",
    "VFPExpandImm",
    "IsFault",
    "IsFault__1",
    "IsFault__2",
    "CNTHP_CTL_read",
    "CNTHP_CTL_write",
    "CNTHP_CVAL_read",
    "CNTP_CTL_NS_read",
    "CNTP_CTL_read",
    "CNTP_CTL_NS_write",
    "CNTP_CTL_write",
    "CNTP_CVAL_NS_read",
    "CNTP_CVAL_read",
    "IsTimerConditionMet",
    "HaveCNTSCExt",
    "SetEventRegister",
    "TestEventCNTP",
    "TestEventCNTV",
    "GenericCounterTick",
    "HaveMPAMExt",
    "Have16bitVMID",
    "HaveQRDMLAHExt",
    "HaveCommonNotPrivateTransExt",
    "HaveExtendedExecuteNeverExt",
    "Have52BitVAExt",
    "Have52BitPAExt",
    "HaveV82Debug",
    "HaveTrapLoadStoreMultipleDeviceExt",
    "HaveFJCVTZSExt",
    "HaveFCADDExt",
    "HaveDOTPExt",
    "HaveSmallTranslationTableExt",
    "HaveFP16MulNoRoundingToFP32Ext",
    "HaveFlagManipulateExt",
    "HaveFlagFormatExt",
    "HaveSelfHostedTrace",
    "HaveBlockBBM",
    "Havev8p4Debug",
    "HaveStage2MemAttrControl",
    "HaveIDSExt",
    "HaveFrintExt",
    "HaveE0PDExt",
    "HaveGTGExt",
    "HaveSBExt",
    "HaveMTEAsyncExt",
    "HaveMTEPermExt",
    "HaveDGHExt",
    "HaveBF16Ext",
    "HaveEBF16",
    "HaveAArch32BF16Ext",
    "HaveInt8MatMulExt",
    "HaveAArch32Int8MatMulExt",
    "HavePMUv3p4",
    "HaveS1POExt",
    "HaveS2PIExt",
    "HaveS2POExt",
    "HaveFeatCLRBHB",
    "HaveTHExt",
    "HaveLSE128",
    "HaveSysInstr128",
    "HaveRASv2Ext",
    "HaveFeatMEC",
    "HaveAccessFlagUpdateForTableExt",
    "HaveFeatABLE",
    "PAREncodeShareability",
    "EncodePARAttrs",
    "DecodeShareability",
    "S2CombineS1Shareability",
    "EffectiveShareability",
    "DecodeDevice",
    "S2CombineS1Device",
    "DecodeSDFAttr",
    "DecodeLDFAttr",
    "S2DecodeCacheability",
    "S2CombineS1AttrHints",
    "WalkMemAttrs",
    "NormalNCMemAttr",
    "S1ConstrainUnpredictableRESMAIR",
    "S1DecodeMemAttrs",
    "S2MemTagType",
    "S2DecodeMemAttrs",
    "S2CombineS1MemAttrs",
    "DecodePPS",
    "AbovePPS",
    "GPCFault",
    "GPCRegistersConsistent",
    "GPICheck",
    "GPIValid",
    "GPTL0Size",
    "DecodeGPTBlock",
    "DecodeGPTContiguous",
    "DecodeGPTGranules",
    "DecodeGPTTable",
    "DecodePGS",
    "GPIIndex",
    "GPTLevel0Index",
    "GPTLevel1Index",
    "GPTWalk",
    "GranuleProtectionCheck",
    "FetchDescriptor",
    "ContiguousSize",
    "TGxGranuleBits",
    "TranslationSize",
    "StageOA",
    "RegimeUsingAArch32",
    "SecurityStateForRegime",
    "DecodePASpace",
    "HasUnprivileged",
    "CreateAddressDescriptor",
    "CreateFaultyAddressDescriptor",
    "AlignmentFault",
    "ExclusiveFault",
    "IsTCR2EL1Enabled",
    "IsTCR2EL2Enabled",
    "CalculateBottomPACBit",
    "HaveEnhancedPAC",
    "HaveEnhancedPAC2",
    "HaveFPAC",
    "HaveFPACCombined",
    "ConstPACField",
    "HavePACQARMA3Generic",
    "HavePACQARMA3Auth",
    "HavePACQARMA5Generic",
    "HavePACQARMA5Auth",
    "HavePACIMPGeneric",
    "HavePACIMPAuth",
    "PtrHasUpperAndLowerAddRanges",
    "PACCellInvShuffle",
    "PACCellShuffle",
    "PACInvSub",
    "RotCell",
    "PACMult",
    "PACSub",
    "PACSub1",
    "TweakCellInvRot",
    "TweakInvShuffle",
    "TweakCellRot",
    "TweakShuffle",
    "ComputePACQARMA",
    "UsePACIMP",
    "UsePACQARMA3",
    "UsePACQARMA5",
    "ComputePAC",
    "Strip",
    "Auth",
    "TrapPACUse",
    "AddPAC",
    "AddPACIA",
    "AddPACIB",
    "AddPACDA",
    "AddPACDB",
    "AddPACGA",
    "AuthIA",
    "AuthIB",
    "AuthDA",
    "AuthDB",
    "V_read",
    "Vpart_read",
    "SetInGuardedPage",
    "BTypeCompatible_PACIXSP",
    "AllInAlignedQuantity",
    "StoreOnlyTagCheckingEnabled",
    "NumBreakpointsImplemented",
    "NumContextAwareBreakpointsImplemented",
    "DebugAddrTop",
    "EDSCR2_read",
    "HaltOnBreakpointOrWatchpoint",
    "NumWatchpointsImplemented",
    "SelfHostedExtendedBPWPEnabled",
    "IsBreakpointEnabled",
    "VTTBR_EL2_read",
    "CheckValidStateMatch",
    "ContextMatchingBreakpointRange",
    "IsContextMatchingBreakpoint",
    "IsWatchpointEnabled",
    "SPEStartCounter",
    "SPEStopCounter",
    "MemHasTransactionalAccess",
    "CollectPhysicalAddress",
    "SPESetDataPhysicalAddress",
    "SPESetDataVirtualAddress",
    "SPESampleLoadStore",
    "Mem_read__1",
    "Mem_read__2",
    "Mem_set__1",
    "Mem_set__2",
    "MemAtomic",
    "IsD128Enabled",
    "ProtectionEnabled",
    "RCWCheck",
    "MemAtomicRCW",
    "NVMem_read",
    "NVMem_read__1",
    "NVMem_set__1",
    "MemStore64B",
    "MemStore64BWithRet",
    "MemLoad64B",
    "FPRecipStepFused",
    "FPRSqrtStepFused",
    "SVEAccessTrap",
    "CheckOriginalSVEEnabled",
    "SMEAccessTrap",
    "CheckSMEEnabled",
    "CheckStreamingSVEEnabled",
    "CheckSVEEnabled",
    "CheckSMEAndZAEnabled",
    "CheckNonStreamingSVEEnabled",
    "CheckStreamingSVEAndZAEnabled",
    "CheckSMEZT0Enabled",
    "CheckSMEAccess",
    "ResetSMEState",
    "SetPSTATE_SM",
    "SetPSTATE_ZA",
    "SetPSTATE_SVCR",
    "Z_read",
    "P_read",
    "FFR_read",
    "MemSingleNF_read",
    "MemNF_read",
    "ActivePredicateElement",
    "PredicateElement",
    "FirstActive",
    "LastActive",
    "NoneActive",
    "ElemFFR_read",
    "LastActiveElement",
    "AnyActiveElement",
    "FPCompareUN",
    "FPCompareNE",
    "FPOne",
    "FPPointFive",
    "GetOptimizedScale",
    "FPScale",
    "Reverse",
    "FPTrigSMul",
    "FPTrigSSel",
    "FPTrigMAddCoefficient_read",
    "FPTrigMAdd",
    "FPExpCoefficient_read",
    "FPExpA",
    "PredTest",
    "DecodePredCount",
    "Reduce",
    "Reduce__1",
    "ReducePredicated",
    "FPConvertSVE",
    "FPConvertSVE__1",
    "IsEven",
    "HaveSVEFP32MatMulExt",
    "HaveSVEFP64MatMulExt",
    "HaveSVE2",
    "HaveSVE2AES",
    "HaveSVE2PMULL128",
    "HaveSVE2SHA3",
    "HaveSVE2SM4",
    "HaveSVE2BitPerm",
    "HaveSVE2p1",
    "HaveSVEB16B16",
    "ShiftSat",
    "BitDeposit",
    "BitExtract",
    "BitGroup",
    "FPLogB",
    "HaveSMEF64F64",
    "HaveSMEI16I64",
    "ZAvector_read",
    "ZAhslice_read",
    "ZAvslice_read",
    "ZAslice_read",
    "ZAtile_read",
    "HaveSME2",
    "HaveSME2p1",
    "HaveSMEB16B16",
    "HaveSMEF16F16",
    "ZT0_read",
    "CounterToPredicate",
    "EncodePredCount",
    "PredCountTest",
    "GCSSynchronizationBarrier",
    "GCSPCREnabled",
    "GCSReturnValueCheckEnabled",
    "GetCurrentGCSPointer",
    "SetCurrentGCSPointer",
    "AddGCSRecord",
    "AddGCSExRecord",
    "GCSDataCheckException",
    "LoadCheckGCSRecord",
    "CheckGCSExRecord",
    "EXLOCKException",
    "GCSSTRTrapException",
    "GCSSS1",
    "GCSSS2",
    "GCSPUSHM",
    "GCSPOPM",
    "GCSPUSHX",
    "GCSPOPCX",
    "GCSPOPX",
    "CheckGCSSTREnabled",
    "CheckMOPSEnabled",
    "MismatchedCpySetTargetEL",
    "MismatchedMemCpyException",
    "MismatchedMemSetException",
    "CPYOptionA",
    "CPYFOptionA",
    "SETOptionA",
    "SETGOptionA",
    "MaxBlockSizeCopiedBytes",
    "BFRound",
    "BFUnpack",
    "BFMulH",
    "FPAdd_BF16",
    "BFMulAddH",
    "BFMulAddH_ZA",
    "FPRoundBF",
    "FPConvertBF",
    "FPConvertBF__1",
    "FPProcessNaNs4",
    "FPDot__1",
    "BFDotAdd",
    "BFMatMulAdd",
    "BFNeg",
    "BFNeg__1",
    "BFInfinity",
    "BFZero",
    "BFAdd",
    "BFAdd__1",
    "BFAdd_ZA",
    "BFSub",
    "BFSub__1",
    "BFSub_ZA",
    "BFMulAdd",
    "BFMulAdd__1",
    "BFMulAdd_ZA",
    "BFMul",
    "BFMul__1",
    "BFMin",
    "BFMin__1",
    "BFMinNum",
    "BFMax",
    "BFMax__1",
    "BFMaxNum",
    "FPMatMulAdd",
    "FPDotAdd",
    "FPDotAdd_ZA",
    "DISR_write",
    "ExternalDebugInterruptsDisabled",
    "VDFSR_read",
    "VDISR_write",
    "TakeTransactionCheckpoint",
    "IsTMEEnabled",
    "TransactionStartTrap",
    "LDST64BTrap",
    "CheckLDST64BEnabled",
    "CheckST64BVEnabled",
    "CheckST64BV0Enabled",
    "CheckFPEnabled64",
    "CheckFPAdvSIMDEnabled64",
    "EffectiveMDSELR_EL1_BANK",
    "SPESampleAddAddressPCVirtual",
    "CollectContextIDR1",
    "CollectContextIDR2",
    "SPESampleAddContext",
    "SPESampleAddOpOther",
    "SPESampleAddOpOther__1",
    "CollectTimeStamp",
    "SPESampleAddTimeStamp",
    "SPEGetRandomInterval",
    "SPEResetSampleCounter",
    "SPEToCollectSample",
    "SPEPreExecution",
    "SPEBufferFilled",
    "SPEBufferIsFull",
    "SPECollectRecord",
    "SPEAddByteToRecord",
    "SPEAddPacketToRecord",
    "SPEEmptyRecord",
    "SPEGetDataSourcePayloadSize",
    "SPEGetEventsPayloadSize",
    "DebugMemWrite",
    "DebugWriteExternalAbort",
    "DebugWriteFault",
    "SPEWriteToBuffer",
    "SPEConstructRecord",
    "SPEResetSampleStorage",
    "SPEPostExecution",
    "SPECycle",
    "SPEGetRandomBoolean",
    "SPE_PMBIDR_P_Read",
    "SPESampleExtendedLoadStore",
    "SPESampleSIMDFPLoadStore",
    "SPESampleMemCopy",
    "SPESampleMemSet",
    "RRX_C",
    "Shift_C",
    "A32ExpandImm_C",
    "A32ExpandImm",
    "DecodeImmShift",
    "DecodeRegShift",
    "Shift",
    "T32ExpandImm_C",
    "T32ExpandImm",
    "HSTR_read",
    "D_read",
    "CheckAdvSIMDEnabled",
    "CheckAdvSIMDOrVFPEnabled",
    "CheckCryptoEnabled32",
    "CheckVFPEnabled",
    "FPHalvedSub",
    "StandardFPSCRValue",
    "FPRecipStep",
    "FPRSqrtStep",
    "Mem_with_type_read",
    "Mem_with_type_read__1",
    "Mem_with_type_set__1",
    "MemA_read",
    "MemU_read",
    "MemU_unpriv_read",
    "MemO_read",
    "MemS_read",
    "S_read",
    "Q_read",
    "ALUExceptionReturn",
    "SelectInstrSet",
    "BXWritePC",
    "BranchWritePC",
    "ALUWritePC",
    "CBWritePC",
    "LoadWritePC",
    "PCStoreValue",
    "Din_read",
    "Qin_read",
    "BankedRegisterAccessValid",
    "ConditionPassed",
    "CPSRWriteByInstr",
    "InITBlock",
    "LastInITBlock",
    "SPSRaccessValid",
    "SPSRWriteByInstr",
    "UnsignedSat",
    "SignedSat",
    "Sat",
    "genRandomNum",
    "getCacheID",
    "CacheConfigRead",
    "GetNreg",
    "decode_aarch32_instrs_ADC_r_A1enc_A_txt",
    "decode_aarch32_instrs_ADC_r_T1enc_A_txt",
    "decode_aarch32_instrs_ADC_r_T2enc_A_txt",
    "decode_aarch32_instrs_ADC_rr_A1enc_A_txt",
    "decode_aarch32_instrs_ADD_i_A1enc_A_txt",
    "decode_aarch32_instrs_ADD_i_T1enc_A_txt",
    "decode_aarch32_instrs_ADD_i_T2enc_A_txt",
    "decode_aarch32_instrs_ADD_i_T3enc_A_txt",
    "decode_aarch32_instrs_ADD_i_T4enc_A_txt",
    "decode_aarch32_instrs_ADD_r_A1enc_A_txt",
    "decode_aarch32_instrs_ADD_r_T1enc_A_txt",
    "decode_aarch32_instrs_ADD_r_T2enc_A_txt",
    "decode_aarch32_instrs_ADD_r_T3enc_A_txt",
    "decode_aarch32_instrs_ADD_rr_A1enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_i_A1enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_i_T1enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_i_T2enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_i_T3enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_i_T4enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_r_A1enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_r_T1enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_r_T2enc_A_txt",
    "decode_aarch32_instrs_ADD_SP_r_T3enc_A_txt",
    "decode_aarch32_instrs_ADR_A1enc_A_txt",
    "decode_aarch32_instrs_ADR_A2enc_A_txt",
    "decode_aarch32_instrs_ADR_T1enc_A_txt",
    "decode_aarch32_instrs_ADR_T2enc_A_txt",
    "decode_aarch32_instrs_ADR_T3enc_A_txt",
    "decode_aarch32_instrs_AND_i_A1enc_A_txt",
    "decode_aarch32_instrs_AND_i_T1enc_A_txt",
    "decode_aarch32_instrs_AND_r_A1enc_A_txt",
    "decode_aarch32_instrs_AND_r_T1enc_A_txt",
    "decode_aarch32_instrs_AND_r_T2enc_A_txt",
    "decode_aarch32_instrs_AND_rr_A1enc_A_txt",
    "decode_aarch32_instrs_ASR_i_T1enc_A_txt",
    "decode_aarch32_instrs_ASR_r_T1enc_A_txt",
    "decode_aarch32_instrs_B_A1enc_A_txt",
    "decode_aarch32_instrs_B_T1enc_A_txt",
    "decode_aarch32_instrs_B_T2enc_A_txt",
    "decode_aarch32_instrs_B_T3enc_A_txt",
    "decode_aarch32_instrs_B_T4enc_A_txt",
    "decode_aarch32_instrs_BFC_A1enc_A_txt",
    "decode_aarch32_instrs_BFC_T1enc_A_txt",
    "decode_aarch32_instrs_BFI_A1enc_A_txt",
    "decode_aarch32_instrs_BFI_T1enc_A_txt",
    "decode_aarch32_instrs_BIC_i_A1enc_A_txt",
    "decode_aarch32_instrs_BIC_i_T1enc_A_txt",
    "decode_aarch32_instrs_BIC_r_A1enc_A_txt",
    "decode_aarch32_instrs_BIC_r_T1enc_A_txt",
    "decode_aarch32_instrs_BIC_r_T2enc_A_txt",
    "decode_aarch32_instrs_BIC_rr_A1enc_A_txt",
    "decode_aarch32_instrs_BKPT_A1enc_A_txt",
    "decode_aarch32_instrs_BKPT_T1enc_A_txt",
    "decode_aarch32_instrs_BL_i_A1enc_A_txt",
    "decode_aarch32_instrs_BL_i_A2enc_A_txt",
    "decode_aarch32_instrs_BL_i_T1enc_A_txt",
    "decode_aarch32_instrs_BL_i_T2enc_A_txt",
    "decode_aarch32_instrs_BLX_r_A1enc_A_txt",
    "decode_aarch32_instrs_BLX_r_T1enc_A_txt",
    "decode_aarch32_instrs_BX_A1enc_A_txt",
    "decode_aarch32_instrs_BX_T1enc_A_txt",
    "decode_aarch32_instrs_CBNZ_T1enc_A_txt",
    "decode_aarch32_instrs_CLREX_A1enc_A_txt",
    "decode_aarch32_instrs_CLREX_T1enc_A_txt",
    "decode_aarch32_instrs_CLZ_A1enc_A_txt",
    "decode_aarch32_instrs_CLZ_T1enc_A_txt",
    "decode_aarch32_instrs_CMN_i_A1enc_A_txt",
    "decode_aarch32_instrs_CMN_i_T1enc_A_txt",
    "decode_aarch32_instrs_CMN_r_A1enc_A_txt",
    "decode_aarch32_instrs_CMN_r_T1enc_A_txt",
    "decode_aarch32_instrs_CMN_r_T2enc_A_txt",
    "decode_aarch32_instrs_CMN_rr_A1enc_A_txt",
    "decode_aarch32_instrs_CMP_i_A1enc_A_txt",
    "decode_aarch32_instrs_CMP_i_T1enc_A_txt",
    "decode_aarch32_instrs_CMP_i_T2enc_A_txt",
    "decode_aarch32_instrs_CMP_r_A1enc_A_txt",
    "decode_aarch32_instrs_CMP_r_T1enc_A_txt",
    "decode_aarch32_instrs_CMP_r_T2enc_A_txt",
    "decode_aarch32_instrs_CMP_r_T3enc_A_txt",
    "decode_aarch32_instrs_CMP_rr_A1enc_A_txt",
    "decode_aarch32_instrs_DBG_A1enc_A_txt",
    "decode_aarch32_instrs_DBG_T1enc_A_txt",
    "decode_aarch32_instrs_DMB_A1enc_A_txt",
    "decode_aarch32_instrs_DMB_T1enc_A_txt",
    "decode_aarch32_instrs_DSB_A1enc_A_txt",
    "decode_aarch32_instrs_DSB_T1enc_A_txt",
    "decode_aarch32_instrs_EOR_i_A1enc_A_txt",
    "decode_aarch32_instrs_EOR_i_T1enc_A_txt",
    "decode_aarch32_instrs_EOR_r_A1enc_A_txt",
    "decode_aarch32_instrs_EOR_r_T1enc_A_txt",
    "decode_aarch32_instrs_EOR_r_T2enc_A_txt",
    "decode_aarch32_instrs_EOR_rr_A1enc_A_txt",
    "decode_aarch32_instrs_ISB_A1enc_A_txt",
    "decode_aarch32_instrs_ISB_T1enc_A_txt",
    "decode_aarch32_instrs_IT_T1enc_A_txt",
    "decode_aarch32_instrs_LDC_i_A1enc_A_txt",
    "decode_aarch32_instrs_LDC_i_T1enc_A_txt",
    "decode_aarch32_instrs_LDC_l_A1enc_A_txt",
    "decode_aarch32_instrs_LDC_l_T1enc_A_txt",
    "decode_aarch32_instrs_LDM_A1enc_A_txt",
    "decode_aarch32_instrs_LDM_T1enc_A_txt",
    "decode_aarch32_instrs_LDM_T2enc_A_txt",
    "decode_aarch32_instrs_LDMDA_A1enc_A_txt",
    "decode_aarch32_instrs_LDMDB_A1enc_A_txt",
    "decode_aarch32_instrs_LDMDB_T1enc_A_txt",
    "decode_aarch32_instrs_LDMIB_A1enc_A_txt",
    "decode_aarch32_instrs_LDRB_i_A1enc_A_txt",
    "decode_aarch32_instrs_LDRB_i_T1enc_A_txt",
    "decode_aarch32_instrs_LDRB_i_T2enc_A_txt",
    "decode_aarch32_instrs_LDRB_i_T3enc_A_txt",
    "decode_aarch32_instrs_LDRB_l_A1enc_A_txt",
    "decode_aarch32_instrs_LDRB_l_T1enc_A_txt",
    "decode_aarch32_instrs_LDRB_r_A1enc_A_txt",
    "decode_aarch32_instrs_LDRB_r_T1enc_A_txt",
    "decode_aarch32_instrs_LDRB_r_T2enc_A_txt",
    "decode_aarch32_instrs_LDRBT_A1enc_A_txt",
    "decode_aarch32_instrs_LDRBT_A2enc_A_txt",
    "decode_aarch32_instrs_LDRBT_T1enc_A_txt",
    "decode_aarch32_instrs_LDRD_i_A1enc_A_txt",
    "decode_aarch32_instrs_LDRD_i_T1enc_A_txt",
    "decode_aarch32_instrs_LDRD_l_A1enc_A_txt",
    "decode_aarch32_instrs_LDRD_l_T1enc_A_txt",
    "decode_aarch32_instrs_LDRD_r_A1enc_A_txt",
    "decode_aarch32_instrs_LDREX_A1enc_A_txt",
    "decode_aarch32_instrs_LDREX_T1enc_A_txt",
    "decode_aarch32_instrs_LDREXB_A1enc_A_txt",
    "decode_aarch32_instrs_LDREXB_T1enc_A_txt",
    "decode_aarch32_instrs_LDREXD_A1enc_A_txt",
    "decode_aarch32_instrs_LDREXD_T1enc_A_txt",
    "decode_aarch32_instrs_LDREXH_A1enc_A_txt",
    "decode_aarch32_instrs_LDREXH_T1enc_A_txt",
    "decode_aarch32_instrs_LDRH_i_A1enc_A_txt",
    "decode_aarch32_instrs_LDRH_i_T1enc_A_txt",
    "decode_aarch32_instrs_LDRH_i_T2enc_A_txt",
    "decode_aarch32_instrs_LDRH_i_T3enc_A_txt",
    "decode_aarch32_instrs_LDRH_l_A1enc_A_txt",
    "decode_aarch32_instrs_LDRH_l_T1enc_A_txt",
    "decode_aarch32_instrs_LDRH_r_A1enc_A_txt",
    "decode_aarch32_instrs_LDRH_r_T1enc_A_txt",
    "decode_aarch32_instrs_LDRH_r_T2enc_A_txt",
    "decode_aarch32_instrs_LDRHT_A1enc_A_txt",
    "decode_aarch32_instrs_LDRHT_A2enc_A_txt",
    "decode_aarch32_instrs_LDRHT_T1enc_A_txt",
    "decode_aarch32_instrs_LDR_i_A1enc_A_txt",
    "decode_aarch32_instrs_LDR_i_T1enc_A_txt",
    "decode_aarch32_instrs_LDR_i_T2enc_A_txt",
    "decode_aarch32_instrs_LDR_i_T3enc_A_txt",
    "decode_aarch32_instrs_LDR_i_T4enc_A_txt",
    "decode_aarch32_instrs_LDR_l_A1enc_A_txt",
    "decode_aarch32_instrs_LDR_l_T1enc_A_txt",
    "decode_aarch32_instrs_LDR_l_T2enc_A_txt",
    "decode_aarch32_instrs_LDR_r_A1enc_A_txt",
    "decode_aarch32_instrs_LDR_r_T1enc_A_txt",
    "decode_aarch32_instrs_LDR_r_T2enc_A_txt",
    "decode_aarch32_instrs_LDRSB_i_A1enc_A_txt",
    "decode_aarch32_instrs_LDRSB_i_T1enc_A_txt",
    "decode_aarch32_instrs_LDRSB_i_T2enc_A_txt",
    "decode_aarch32_instrs_LDRSB_l_A1enc_A_txt",
    "decode_aarch32_instrs_LDRSB_l_T1enc_A_txt",
    "decode_aarch32_instrs_LDRSB_r_A1enc_A_txt",
    "decode_aarch32_instrs_LDRSB_r_T1enc_A_txt",
    "decode_aarch32_instrs_LDRSB_r_T2enc_A_txt",
    "decode_aarch32_instrs_LDRSBT_A1enc_A_txt",
    "decode_aarch32_instrs_LDRSBT_A2enc_A_txt",
    "decode_aarch32_instrs_LDRSBT_T1enc_A_txt",
    "decode_aarch32_instrs_LDRSH_i_A1enc_A_txt",
    "decode_aarch32_instrs_LDRSH_i_T1enc_A_txt",
    "decode_aarch32_instrs_LDRSH_i_T2enc_A_txt",
    "decode_aarch32_instrs_LDRSH_l_A1enc_A_txt",
    "decode_aarch32_instrs_LDRSH_l_T1enc_A_txt",
    "decode_aarch32_instrs_LDRSH_r_A1enc_A_txt",
    "decode_aarch32_instrs_LDRSH_r_T1enc_A_txt",
    "decode_aarch32_instrs_LDRSH_r_T2enc_A_txt",
    "decode_aarch32_instrs_LDRSHT_A1enc_A_txt",
    "decode_aarch32_instrs_LDRSHT_A2enc_A_txt",
    "decode_aarch32_instrs_LDRSHT_T1enc_A_txt",
    "decode_aarch32_instrs_LDRT_A1enc_A_txt",
    "decode_aarch32_instrs_LDRT_A2enc_A_txt",
    "decode_aarch32_instrs_LDRT_T1enc_A_txt",
    "decode_aarch32_instrs_LSL_i_T1enc_A_txt",
    "decode_aarch32_instrs_LSL_r_T1enc_A_txt",
    "decode_aarch32_instrs_LSL_r_T2enc_A_txt",
    "decode_aarch32_instrs_LSR_i_T1enc_A_txt",
    "decode_aarch32_instrs_LSR_r_T1enc_A_txt",
    "decode_aarch32_instrs_MCR_A1enc_A_txt",
    "decode_aarch32_instrs_MCR_T1enc_A_txt",
    "decode_aarch32_instrs_MCRR_A1enc_A_txt",
    "decode_aarch32_instrs_MCRR_T1enc_A_txt",
    "decode_aarch32_instrs_MLA_A1enc_A_txt",
    "decode_aarch32_instrs_MLA_T1enc_A_txt",
    "decode_aarch32_instrs_MLS_A1enc_A_txt",
    "decode_aarch32_instrs_MLS_T1enc_A_txt",
    "decode_aarch32_instrs_MOV_i_A1enc_A_txt",
    "decode_aarch32_instrs_MOV_i_A2enc_A_txt",
    "decode_aarch32_instrs_MOV_i_T1enc_A_txt",
    "decode_aarch32_instrs_MOV_i_T2enc_A_txt",
    "decode_aarch32_instrs_MOV_i_T3enc_A_txt",
    "decode_aarch32_instrs_MOV_r_A1enc_A_txt",
    "decode_aarch32_instrs_MOV_r_T1enc_A_txt",
    "decode_aarch32_instrs_MOV_r_T2enc_A_txt",
    "decode_aarch32_instrs_MOV_r_T3enc_A_txt",
    "decode_aarch32_instrs_MOV_rr_A1enc_A_txt",
    "decode_aarch32_instrs_MOV_rr_T1enc_A_txt",
    "decode_aarch32_instrs_MOV_rr_T2enc_A_txt",
    "decode_aarch32_instrs_MOVT_A1enc_A_txt",
    "decode_aarch32_instrs_MOVT_T1enc_A_txt",
    "decode_aarch32_instrs_MRC_A1enc_A_txt",
    "decode_aarch32_instrs_MRC_T1enc_A_txt",
    "decode_aarch32_instrs_MRRC_A1enc_A_txt",
    "decode_aarch32_instrs_MRRC_T1enc_A_txt",
    "decode_aarch32_instrs_MUL_A1enc_A_txt",
    "decode_aarch32_instrs_MUL_T1enc_A_txt",
    "decode_aarch32_instrs_MUL_T2enc_A_txt",
    "decode_aarch32_instrs_MVN_i_A1enc_A_txt",
    "decode_aarch32_instrs_MVN_i_T1enc_A_txt",
    "decode_aarch32_instrs_MVN_r_A1enc_A_txt",
    "decode_aarch32_instrs_MVN_r_T1enc_A_txt",
    "decode_aarch32_instrs_MVN_r_T2enc_A_txt",
    "decode_aarch32_instrs_MVN_rr_A1enc_A_txt",
    "decode_aarch32_instrs_NOP_A1enc_A_txt",
    "decode_aarch32_instrs_NOP_T1enc_A_txt",
    "decode_aarch32_instrs_NOP_T2enc_A_txt",
    "decode_aarch32_instrs_ORN_i_T1enc_A_txt",
    "decode_aarch32_instrs_ORN_r_T1enc_A_txt",
    "decode_aarch32_instrs_ORR_i_A1enc_A_txt",
    "decode_aarch32_instrs_ORR_i_T1enc_A_txt",
    "decode_aarch32_instrs_ORR_r_A1enc_A_txt",
    "decode_aarch32_instrs_ORR_r_T1enc_A_txt",
    "decode_aarch32_instrs_ORR_r_T2enc_A_txt",
    "decode_aarch32_instrs_ORR_rr_A1enc_A_txt",
    "decode_aarch32_instrs_PKH_A1enc_A_txt",
    "decode_aarch32_instrs_PKH_T1enc_A_txt",
    "decode_aarch32_instrs_PLD_i_A1enc_A_txt",
    "decode_aarch32_instrs_PLD_i_T1enc_A_txt",
    "decode_aarch32_instrs_PLD_i_T2enc_A_txt",
    "decode_aarch32_instrs_PLD_l_A1enc_A_txt",
    "decode_aarch32_instrs_PLD_l_T1enc_A_txt",
    "decode_aarch32_instrs_PLD_r_A1enc_A_txt",
    "decode_aarch32_instrs_PLD_r_T1enc_A_txt",
    "decode_aarch32_instrs_PLI_i_A1enc_A_txt",
    "decode_aarch32_instrs_PLI_i_T1enc_A_txt",
    "decode_aarch32_instrs_PLI_i_T2enc_A_txt",
    "decode_aarch32_instrs_PLI_i_T3enc_A_txt",
    "decode_aarch32_instrs_PLI_r_A1enc_A_txt",
    "decode_aarch32_instrs_PLI_r_T1enc_A_txt",
    "decode_aarch32_instrs_POP_T1enc_A_txt",
    "decode_aarch32_instrs_PUSH_T1enc_A_txt",
    "decode_aarch32_instrs_QADD16_A1enc_A_txt",
    "decode_aarch32_instrs_QADD16_T1enc_A_txt",
    "decode_aarch32_instrs_QADD8_A1enc_A_txt",
    "decode_aarch32_instrs_QADD8_T1enc_A_txt",
    "decode_aarch32_instrs_QADD_A1enc_A_txt",
    "decode_aarch32_instrs_QADD_T1enc_A_txt",
    "decode_aarch32_instrs_QASX_A1enc_A_txt",
    "decode_aarch32_instrs_QASX_T1enc_A_txt",
    "decode_aarch32_instrs_QDADD_A1enc_A_txt",
    "decode_aarch32_instrs_QDADD_T1enc_A_txt",
    "decode_aarch32_instrs_QDSUB_A1enc_A_txt",
    "decode_aarch32_instrs_QDSUB_T1enc_A_txt",
    "decode_aarch32_instrs_QSAX_A1enc_A_txt",
    "decode_aarch32_instrs_QSAX_T1enc_A_txt",
    "decode_aarch32_instrs_QSUB16_A1enc_A_txt",
    "decode_aarch32_instrs_QSUB16_T1enc_A_txt",
    "decode_aarch32_instrs_QSUB8_A1enc_A_txt",
    "decode_aarch32_instrs_QSUB8_T1enc_A_txt",
    "decode_aarch32_instrs_QSUB_A1enc_A_txt",
    "decode_aarch32_instrs_QSUB_T1enc_A_txt",
    "decode_aarch32_instrs_RBIT_A1enc_A_txt",
    "decode_aarch32_instrs_RBIT_T1enc_A_txt",
    "decode_aarch32_instrs_REV16_A1enc_A_txt",
    "decode_aarch32_instrs_REV16_T1enc_A_txt",
    "decode_aarch32_instrs_REV16_T2enc_A_txt",
    "decode_aarch32_instrs_REV_A1enc_A_txt",
    "decode_aarch32_instrs_REV_T1enc_A_txt",
    "decode_aarch32_instrs_REV_T2enc_A_txt",
    "decode_aarch32_instrs_REVSH_A1enc_A_txt",
    "decode_aarch32_instrs_REVSH_T1enc_A_txt",
    "decode_aarch32_instrs_REVSH_T2enc_A_txt",
    "decode_aarch32_instrs_ROR_r_T1enc_A_txt",
    "decode_aarch32_instrs_RSB_i_A1enc_A_txt",
    "decode_aarch32_instrs_RSB_i_T1enc_A_txt",
    "decode_aarch32_instrs_RSB_i_T2enc_A_txt",
    "decode_aarch32_instrs_RSB_r_A1enc_A_txt",
    "decode_aarch32_instrs_RSB_r_T1enc_A_txt",
    "decode_aarch32_instrs_RSB_rr_A1enc_A_txt",
    "decode_aarch32_instrs_RSC_i_A1enc_A_txt",
    "decode_aarch32_instrs_RSC_r_A1enc_A_txt",
    "decode_aarch32_instrs_RSC_rr_A1enc_A_txt",
    "decode_aarch32_instrs_SADD16_A1enc_A_txt",
    "decode_aarch32_instrs_SADD16_T1enc_A_txt",
    "decode_aarch32_instrs_SADD8_A1enc_A_txt",
    "decode_aarch32_instrs_SADD8_T1enc_A_txt",
    "decode_aarch32_instrs_SASX_A1enc_A_txt",
    "decode_aarch32_instrs_SASX_T1enc_A_txt",
    "decode_aarch32_instrs_SB_A1enc_A_txt",
    "decode_aarch32_instrs_SB_T1enc_A_txt",
    "decode_aarch32_instrs_SBC_i_A1enc_A_txt",
    "decode_aarch32_instrs_SBC_i_T1enc_A_txt",
    "decode_aarch32_instrs_SBC_r_A1enc_A_txt",
    "decode_aarch32_instrs_SBC_r_T1enc_A_txt",
    "decode_aarch32_instrs_SBC_r_T2enc_A_txt",
    "decode_aarch32_instrs_SBC_rr_A1enc_A_txt",
    "decode_aarch32_instrs_SBFX_A1enc_A_txt",
    "decode_aarch32_instrs_SBFX_T1enc_A_txt",
    "decode_aarch32_instrs_SDIV_A1enc_A_txt",
    "decode_aarch32_instrs_SDIV_T1enc_A_txt",
    "decode_aarch32_instrs_SEL_A1enc_A_txt",
    "decode_aarch32_instrs_SEL_T1enc_A_txt",
    "decode_aarch32_instrs_SETEND_A1enc_A_txt",
    "decode_aarch32_instrs_SETEND_T1enc_A_txt",
    "decode_aarch32_instrs_SEV_A1enc_A_txt",
    "decode_aarch32_instrs_SEV_T1enc_A_txt",
    "decode_aarch32_instrs_SEV_T2enc_A_txt",
    "decode_aarch32_instrs_SHADD16_A1enc_A_txt",
    "decode_aarch32_instrs_SHADD16_T1enc_A_txt",
    "decode_aarch32_instrs_SHADD8_A1enc_A_txt",
    "decode_aarch32_instrs_SHADD8_T1enc_A_txt",
    "decode_aarch32_instrs_SHASX_A1enc_A_txt",
    "decode_aarch32_instrs_SHASX_T1enc_A_txt",
    "decode_aarch32_instrs_SHSAX_A1enc_A_txt",
    "decode_aarch32_instrs_SHSAX_T1enc_A_txt",
    "decode_aarch32_instrs_SHSUB16_A1enc_A_txt",
    "decode_aarch32_instrs_SHSUB16_T1enc_A_txt",
    "decode_aarch32_instrs_SHSUB8_A1enc_A_txt",
    "decode_aarch32_instrs_SHSUB8_T1enc_A_txt",
    "decode_aarch32_instrs_SMLABB_A1enc_A_txt",
    "decode_aarch32_instrs_SMLABB_T1enc_A_txt",
    "decode_aarch32_instrs_SMLAD_A1enc_A_txt",
    "decode_aarch32_instrs_SMLAD_T1enc_A_txt",
    "decode_aarch32_instrs_SMLAL_A1enc_A_txt",
    "decode_aarch32_instrs_SMLAL_T1enc_A_txt",
    "decode_aarch32_instrs_SMLALBB_A1enc_A_txt",
    "decode_aarch32_instrs_SMLALBB_T1enc_A_txt",
    "decode_aarch32_instrs_SMLALD_A1enc_A_txt",
    "decode_aarch32_instrs_SMLALD_T1enc_A_txt",
    "decode_aarch32_instrs_SMLAWB_A1enc_A_txt",
    "decode_aarch32_instrs_SMLAWB_T1enc_A_txt",
    "decode_aarch32_instrs_SMLSD_A1enc_A_txt",
    "decode_aarch32_instrs_SMLSD_T1enc_A_txt",
    "decode_aarch32_instrs_SMLSLD_A1enc_A_txt",
    "decode_aarch32_instrs_SMLSLD_T1enc_A_txt",
    "decode_aarch32_instrs_SMMLA_A1enc_A_txt",
    "decode_aarch32_instrs_SMMLA_T1enc_A_txt",
    "decode_aarch32_instrs_SMMLS_A1enc_A_txt",
    "decode_aarch32_instrs_SMMLS_T1enc_A_txt",
    "decode_aarch32_instrs_SMMUL_A1enc_A_txt",
    "decode_aarch32_instrs_SMMUL_T1enc_A_txt",
    "decode_aarch32_instrs_SMUAD_A1enc_A_txt",
    "decode_aarch32_instrs_SMUAD_T1enc_A_txt",
    "decode_aarch32_instrs_SMULBB_A1enc_A_txt",
    "decode_aarch32_instrs_SMULBB_T1enc_A_txt",
    "decode_aarch32_instrs_SMULL_A1enc_A_txt",
    "decode_aarch32_instrs_SMULL_T1enc_A_txt",
    "decode_aarch32_instrs_SMULWB_A1enc_A_txt",
    "decode_aarch32_instrs_SMULWB_T1enc_A_txt",
    "decode_aarch32_instrs_SMUSD_A1enc_A_txt",
    "decode_aarch32_instrs_SMUSD_T1enc_A_txt",
    "decode_aarch32_instrs_SSAT16_A1enc_A_txt",
    "decode_aarch32_instrs_SSAT16_T1enc_A_txt",
    "decode_aarch32_instrs_SSAT_A1enc_A_txt",
    "decode_aarch32_instrs_SSUB8_A1enc_A_txt",
    "decode_aarch32_instrs_SSUB8_T1enc_A_txt",
    "decode_aarch32_instrs_STC_A1enc_A_txt",
    "decode_aarch32_instrs_STC_T1enc_A_txt",
    "decode_aarch32_instrs_STM_A1enc_A_txt",
    "decode_aarch32_instrs_STM_T1enc_A_txt",
    "decode_aarch32_instrs_STM_T2enc_A_txt",
    "decode_aarch32_instrs_STMDA_A1enc_A_txt",
    "decode_aarch32_instrs_STMDB_A1enc_A_txt",
    "decode_aarch32_instrs_STMDB_T1enc_A_txt",
    "decode_aarch32_instrs_STMIB_A1enc_A_txt",
    "decode_aarch32_instrs_STRB_i_A1enc_A_txt",
    "decode_aarch32_instrs_STRB_i_T1enc_A_txt",
    "decode_aarch32_instrs_STRB_i_T2enc_A_txt",
    "decode_aarch32_instrs_STRB_i_T3enc_A_txt",
    "decode_aarch32_instrs_STRB_r_A1enc_A_txt",
    "decode_aarch32_instrs_STRB_r_T1enc_A_txt",
    "decode_aarch32_instrs_STRB_r_T2enc_A_txt",
    "decode_aarch32_instrs_STRBT_A1enc_A_txt",
    "decode_aarch32_instrs_STRBT_A2enc_A_txt",
    "decode_aarch32_instrs_STRBT_T1enc_A_txt",
    "decode_aarch32_instrs_STRD_i_A1enc_A_txt",
    "decode_aarch32_instrs_STRD_i_T1enc_A_txt",
    "decode_aarch32_instrs_STRD_r_A1enc_A_txt",
    "decode_aarch32_instrs_STREX_A1enc_A_txt",
    "decode_aarch32_instrs_STREX_T1enc_A_txt",
    "decode_aarch32_instrs_STREXB_A1enc_A_txt",
    "decode_aarch32_instrs_STREXB_T1enc_A_txt",
    "decode_aarch32_instrs_STREXD_A1enc_A_txt",
    "decode_aarch32_instrs_STREXD_T1enc_A_txt",
    "decode_aarch32_instrs_STREXH_A1enc_A_txt",
    "decode_aarch32_instrs_STREXH_T1enc_A_txt",
    "decode_aarch32_instrs_STRH_i_A1enc_A_txt",
    "decode_aarch32_instrs_STRH_i_T1enc_A_txt",
    "decode_aarch32_instrs_STRH_i_T2enc_A_txt",
    "decode_aarch32_instrs_STRH_i_T3enc_A_txt",
    "decode_aarch32_instrs_STRH_r_A1enc_A_txt",
    "decode_aarch32_instrs_STRH_r_T1enc_A_txt",
    "decode_aarch32_instrs_STRH_r_T2enc_A_txt",
    "decode_aarch32_instrs_STRHT_A1enc_A_txt",
    "decode_aarch32_instrs_STRHT_A2enc_A_txt",
    "decode_aarch32_instrs_STRHT_T1enc_A_txt",
    "decode_aarch32_instrs_STR_i_A1enc_A_txt",
    "decode_aarch32_instrs_STR_i_T1enc_A_txt",
    "decode_aarch32_instrs_STR_i_T2enc_A_txt",
    "decode_aarch32_instrs_STR_i_T3enc_A_txt",
    "decode_aarch32_instrs_STR_i_T4enc_A_txt",
    "decode_aarch32_instrs_STR_r_A1enc_A_txt",
    "decode_aarch32_instrs_STR_r_T1enc_A_txt",
    "decode_aarch32_instrs_STR_r_T2enc_A_txt",
    "decode_aarch32_instrs_STRT_A1enc_A_txt",
    "decode_aarch32_instrs_STRT_A2enc_A_txt",
    "decode_aarch32_instrs_STRT_T1enc_A_txt",
    "decode_aarch32_instrs_SUB_i_A1enc_A_txt",
    "decode_aarch32_instrs_SUB_i_T1enc_A_txt",
    "decode_aarch32_instrs_SUB_i_T2enc_A_txt",
    "decode_aarch32_instrs_SUB_i_T3enc_A_txt",
    "decode_aarch32_instrs_SUB_i_T4enc_A_txt",
    "decode_aarch32_instrs_SUB_i_T5enc_A_txt",
    "decode_aarch32_instrs_SUB_r_A1enc_A_txt",
    "decode_aarch32_instrs_SUB_r_T1enc_A_txt",
    "decode_aarch32_instrs_SUB_r_T2enc_A_txt",
    "decode_aarch32_instrs_SUB_rr_A1enc_A_txt",
    "decode_aarch32_instrs_SUB_SP_i_A1enc_A_txt",
    "decode_aarch32_instrs_SUB_SP_i_T1enc_A_txt",
    "decode_aarch32_instrs_SUB_SP_i_T2enc_A_txt",
    "decode_aarch32_instrs_SUB_SP_i_T3enc_A_txt",
    "decode_aarch32_instrs_SUB_SP_r_A1enc_A_txt",
    "decode_aarch32_instrs_SUB_SP_r_T1enc_A_txt",
    "decode_aarch32_instrs_SVC_A1enc_A_txt",
    "decode_aarch32_instrs_SVC_T1enc_A_txt",
    "decode_aarch32_instrs_SXTAB16_A1enc_A_txt",
    "decode_aarch32_instrs_SXTAB16_T1enc_A_txt",
    "decode_aarch32_instrs_SXTAB_A1enc_A_txt",
    "decode_aarch32_instrs_SXTAB_T1enc_A_txt",
    "decode_aarch32_instrs_SXTAH_A1enc_A_txt",
    "decode_aarch32_instrs_SXTAH_T1enc_A_txt",
    "decode_aarch32_instrs_SXTB16_A1enc_A_txt",
    "decode_aarch32_instrs_SXTB16_T1enc_A_txt",
    "decode_aarch32_instrs_SXTB_A1enc_A_txt",
    "decode_aarch32_instrs_SXTB_T1enc_A_txt",
    "decode_aarch32_instrs_SXTB_T2enc_A_txt",
    "decode_aarch32_instrs_SXTH_A1enc_A_txt",
    "decode_aarch32_instrs_SXTH_T1enc_A_txt",
    "decode_aarch32_instrs_SXTH_T2enc_A_txt",
    "decode_aarch32_instrs_TBB_T1enc_A_txt",
    "decode_aarch32_instrs_TEQ_i_A1enc_A_txt",
    "decode_aarch32_instrs_TEQ_i_T1enc_A_txt",
    "decode_aarch32_instrs_TEQ_r_A1enc_A_txt",
    "decode_aarch32_instrs_TEQ_r_T1enc_A_txt",
    "decode_aarch32_instrs_TEQ_rr_A1enc_A_txt",
    "decode_aarch32_instrs_TST_i_A1enc_A_txt",
    "decode_aarch32_instrs_TST_i_T1enc_A_txt",
    "decode_aarch32_instrs_TST_r_A1enc_A_txt",
    "decode_aarch32_instrs_TST_r_T1enc_A_txt",
    "decode_aarch32_instrs_TST_r_T2enc_A_txt",
    "decode_aarch32_instrs_TST_rr_A1enc_A_txt",
    "decode_aarch32_instrs_UADD16_A1enc_A_txt",
    "decode_aarch32_instrs_UADD16_T1enc_A_txt",
    "decode_aarch32_instrs_UADD8_A1enc_A_txt",
    "decode_aarch32_instrs_UADD8_T1enc_A_txt",
    "decode_aarch32_instrs_UASX_A1enc_A_txt",
    "decode_aarch32_instrs_UASX_T1enc_A_txt",
    "decode_aarch32_instrs_UBFX_A1enc_A_txt",
    "decode_aarch32_instrs_UBFX_T1enc_A_txt",
    "decode_aarch32_instrs_UDF_A1enc_A_txt",
    "decode_aarch32_instrs_UDF_T1enc_A_txt",
    "decode_aarch32_instrs_UDF_T2enc_A_txt",
    "decode_aarch32_instrs_UDIV_A1enc_A_txt",
    "decode_aarch32_instrs_UDIV_T1enc_A_txt",
    "decode_aarch32_instrs_UHADD16_A1enc_A_txt",
    "decode_aarch32_instrs_UHADD16_T1enc_A_txt",
    "decode_aarch32_instrs_UHADD8_A1enc_A_txt",
    "decode_aarch32_instrs_UHADD8_T1enc_A_txt",
    "decode_aarch32_instrs_UHASX_A1enc_A_txt",
    "decode_aarch32_instrs_UHASX_T1enc_A_txt",
    "decode_aarch32_instrs_UHSAX_A1enc_A_txt",
    "decode_aarch32_instrs_UHSAX_T1enc_A_txt",
    "decode_aarch32_instrs_UHSUB16_A1enc_A_txt",
    "decode_aarch32_instrs_UHSUB16_T1enc_A_txt",
    "decode_aarch32_instrs_UHSUB8_A1enc_A_txt",
    "decode_aarch32_instrs_UHSUB8_T1enc_A_txt",
    "decode_aarch32_instrs_UMAAL_A1enc_A_txt",
    "decode_aarch32_instrs_UMAAL_T1enc_A_txt",
    "decode_aarch32_instrs_UMLAL_A1enc_A_txt",
    "decode_aarch32_instrs_UMLAL_T1enc_A_txt",
    "decode_aarch32_instrs_UMULL_A1enc_A_txt",
    "decode_aarch32_instrs_UMULL_T1enc_A_txt",
    "decode_aarch32_instrs_UQADD16_A1enc_A_txt",
    "decode_aarch32_instrs_UQADD16_T1enc_A_txt",
    "decode_aarch32_instrs_UQADD8_A1enc_A_txt",
    "decode_aarch32_instrs_UQADD8_T1enc_A_txt",
    "decode_aarch32_instrs_UQASX_A1enc_A_txt",
    "decode_aarch32_instrs_UQASX_T1enc_A_txt",
    "decode_aarch32_instrs_UQSAX_A1enc_A_txt",
    "decode_aarch32_instrs_UQSAX_T1enc_A_txt",
    "decode_aarch32_instrs_UQSUB16_A1enc_A_txt",
    "decode_aarch32_instrs_UQSUB16_T1enc_A_txt",
    "decode_aarch32_instrs_UQSUB8_A1enc_A_txt",
    "decode_aarch32_instrs_UQSUB8_T1enc_A_txt",
    "decode_aarch32_instrs_USAD8_A1enc_A_txt",
    "decode_aarch32_instrs_USAD8_T1enc_A_txt",
    "decode_aarch32_instrs_USADA8_A1enc_A_txt",
    "decode_aarch32_instrs_USADA8_T1enc_A_txt",
    "decode_aarch32_instrs_USAT16_A1enc_A_txt",
    "decode_aarch32_instrs_USAT16_T1enc_A_txt",
    "decode_aarch32_instrs_USAT_A1enc_A_txt",
    "decode_aarch32_instrs_USAT_T1enc_A_txt",
    "decode_aarch32_instrs_USAX_A1enc_A_txt",
    "decode_aarch32_instrs_USAX_T1enc_A_txt",
    "decode_aarch32_instrs_USUB16_A1enc_A_txt",
    "decode_aarch32_instrs_USUB16_T1enc_A_txt",
    "decode_aarch32_instrs_USUB8_A1enc_A_txt",
    "decode_aarch32_instrs_USUB8_T1enc_A_txt",
    "decode_aarch32_instrs_UXTAB16_A1enc_A_txt",
    "decode_aarch32_instrs_UXTAB16_T1enc_A_txt",
    "decode_aarch32_instrs_UXTAB_A1enc_A_txt",
    "decode_aarch32_instrs_UXTAB_T1enc_A_txt",
    "decode_aarch32_instrs_UXTAH_A1enc_A_txt",
    "decode_aarch32_instrs_UXTAH_T1enc_A_txt",
    "decode_aarch32_instrs_UXTB16_A1enc_A_txt",
    "decode_aarch32_instrs_UXTB16_T1enc_A_txt",
    "decode_aarch32_instrs_UXTB_A1enc_A_txt",
    "decode_aarch32_instrs_UXTB_T1enc_A_txt",
    "decode_aarch32_instrs_UXTB_T2enc_A_txt",
    "decode_aarch32_instrs_UXTH_A1enc_A_txt",
    "decode_aarch32_instrs_UXTH_T1enc_A_txt",
    "decode_aarch32_instrs_UXTH_T2enc_A_txt",
    "decode_aarch32_instrs_VABA_A1enc_A_txt",
    "decode_aarch32_instrs_VABA_A2enc_A_txt",
    "decode_aarch32_instrs_VABA_T1enc_A_txt",
    "decode_aarch32_instrs_VABA_T2enc_A_txt",
    "decode_aarch32_instrs_VABD_f_A1enc_A_txt",
    "decode_aarch32_instrs_VABD_f_T1enc_A_txt",
    "decode_aarch32_instrs_VABD_i_A1enc_A_txt",
    "decode_aarch32_instrs_VABD_i_A2enc_A_txt",
    "decode_aarch32_instrs_VABD_i_T1enc_A_txt",
    "decode_aarch32_instrs_VABD_i_T2enc_A_txt",
    "decode_aarch32_instrs_VABS_A1enc_A_txt",
    "decode_aarch32_instrs_VABS_A2enc_A_txt",
    "decode_aarch32_instrs_VABS_T1enc_A_txt",
    "decode_aarch32_instrs_VABS_T2enc_A_txt",
    "decode_aarch32_instrs_VACGE_A1enc_A_txt",
    "decode_aarch32_instrs_VACGE_T1enc_A_txt",
    "decode_aarch32_instrs_VADD_f_A1enc_A_txt",
    "decode_aarch32_instrs_VADD_f_A2enc_A_txt",
    "decode_aarch32_instrs_VADD_f_T1enc_A_txt",
    "decode_aarch32_instrs_VADD_f_T2enc_A_txt",
    "decode_aarch32_instrs_VADDHN_A1enc_A_txt",
    "decode_aarch32_instrs_VADDHN_T1enc_A_txt",
    "decode_aarch32_instrs_VADD_i_A1enc_A_txt",
    "decode_aarch32_instrs_VADD_i_T1enc_A_txt",
    "decode_aarch32_instrs_VADDL_A1enc_A_txt",
    "decode_aarch32_instrs_VADDL_T1enc_A_txt",
    "decode_aarch32_instrs_VAND_r_A1enc_A_txt",
    "decode_aarch32_instrs_VAND_r_T1enc_A_txt",
    "decode_aarch32_instrs_VBIC_i_A1enc_A_txt",
    "decode_aarch32_instrs_VBIC_i_A2enc_A_txt",
    "decode_aarch32_instrs_VBIC_i_T1enc_A_txt",
    "decode_aarch32_instrs_VBIC_i_T2enc_A_txt",
    "decode_aarch32_instrs_VBIC_r_A1enc_A_txt",
    "decode_aarch32_instrs_VBIC_r_T1enc_A_txt",
    "decode_aarch32_instrs_VBIF_A1enc_A_txt",
    "decode_aarch32_instrs_VBIF_T1enc_A_txt",
    "decode_aarch32_instrs_VCEQ_i_A1enc_A_txt",
    "decode_aarch32_instrs_VCEQ_i_T1enc_A_txt",
    "decode_aarch32_instrs_VCEQ_r_A1enc_A_txt",
    "decode_aarch32_instrs_VCEQ_r_A2enc_A_txt",
    "decode_aarch32_instrs_VCEQ_r_T1enc_A_txt",
    "decode_aarch32_instrs_VCEQ_r_T2enc_A_txt",
    "decode_aarch32_instrs_VCGE_i_A1enc_A_txt",
    "decode_aarch32_instrs_VCGE_i_T1enc_A_txt",
    "decode_aarch32_instrs_VCGE_r_A1enc_A_txt",
    "decode_aarch32_instrs_VCGE_r_A2enc_A_txt",
    "decode_aarch32_instrs_VCGE_r_T1enc_A_txt",
    "decode_aarch32_instrs_VCGE_r_T2enc_A_txt",
    "decode_aarch32_instrs_VCGT_i_A1enc_A_txt",
    "decode_aarch32_instrs_VCGT_i_T1enc_A_txt",
    "decode_aarch32_instrs_VCGT_r_A1enc_A_txt",
    "decode_aarch32_instrs_VCGT_r_A2enc_A_txt",
    "decode_aarch32_instrs_VCGT_r_T1enc_A_txt",
    "decode_aarch32_instrs_VCGT_r_T2enc_A_txt",
    "decode_aarch32_instrs_VCLE_i_A1enc_A_txt",
    "decode_aarch32_instrs_VCLE_i_T1enc_A_txt",
    "decode_aarch32_instrs_VCLS_A1enc_A_txt",
    "decode_aarch32_instrs_VCLS_T1enc_A_txt",
    "decode_aarch32_instrs_VCLT_i_A1enc_A_txt",
    "decode_aarch32_instrs_VCLT_i_T1enc_A_txt",
    "decode_aarch32_instrs_VCLZ_A1enc_A_txt",
    "decode_aarch32_instrs_VCLZ_T1enc_A_txt",
    "decode_aarch32_instrs_VCMP_A1enc_A_txt",
    "decode_aarch32_instrs_VCMP_A2enc_A_txt",
    "decode_aarch32_instrs_VCMP_T1enc_A_txt",
    "decode_aarch32_instrs_VCMP_T2enc_A_txt",
    "decode_aarch32_instrs_VCNT_A1enc_A_txt",
    "decode_aarch32_instrs_VCNT_T1enc_A_txt",
    "decode_aarch32_instrs_VCVTB_A1enc_A_txt",
    "decode_aarch32_instrs_VCVTB_T1enc_A_txt",
    "decode_aarch32_instrs_VCVT_ds_A1enc_A_txt",
    "decode_aarch32_instrs_VCVT_ds_T1enc_A_txt",
    "decode_aarch32_instrs_VCVT_hs_A1enc_A_txt",
    "decode_aarch32_instrs_VCVT_hs_T1enc_A_txt",
    "decode_aarch32_instrs_VCVT_is_A1enc_A_txt",
    "decode_aarch32_instrs_VCVT_is_T1enc_A_txt",
    "decode_aarch32_instrs_VCVT_iv_A1enc_A_txt",
    "decode_aarch32_instrs_VCVT_iv_T1enc_A_txt",
    "decode_aarch32_instrs_VCVT_xs_A1enc_A_txt",
    "decode_aarch32_instrs_VCVT_xs_T1enc_A_txt",
    "decode_aarch32_instrs_VCVT_xv_A1enc_A_txt",
    "decode_aarch32_instrs_VCVT_xv_T1enc_A_txt",
    "decode_aarch32_instrs_VDIV_A1enc_A_txt",
    "decode_aarch32_instrs_VDIV_T1enc_A_txt",
    "decode_aarch32_instrs_VDUP_r_A1enc_A_txt",
    "decode_aarch32_instrs_VDUP_r_T1enc_A_txt",
    "decode_aarch32_instrs_VDUP_s_A1enc_A_txt",
    "decode_aarch32_instrs_VDUP_s_T1enc_A_txt",
    "decode_aarch32_instrs_VEOR_A1enc_A_txt",
    "decode_aarch32_instrs_VEOR_T1enc_A_txt",
    "decode_aarch32_instrs_VEXT_A1enc_A_txt",
    "decode_aarch32_instrs_VEXT_T1enc_A_txt",
    "decode_aarch32_instrs_VFMA_A1enc_A_txt",
    "decode_aarch32_instrs_VFMA_A2enc_A_txt",
    "decode_aarch32_instrs_VFMA_T1enc_A_txt",
    "decode_aarch32_instrs_VFMA_T2enc_A_txt",
    "decode_aarch32_instrs_VFNMA_A1enc_A_txt",
    "decode_aarch32_instrs_VFNMA_T1enc_A_txt",
    "decode_aarch32_instrs_VHADD_A1enc_A_txt",
    "decode_aarch32_instrs_VHADD_T1enc_A_txt",
    "decode_aarch32_instrs_VLD1_1_A1enc_A_txt",
    "decode_aarch32_instrs_VLD1_1_A2enc_A_txt",
    "decode_aarch32_instrs_VLD1_1_A3enc_A_txt",
    "decode_aarch32_instrs_VLD1_1_T1enc_A_txt",
    "decode_aarch32_instrs_VLD1_1_T2enc_A_txt",
    "decode_aarch32_instrs_VLD1_1_T3enc_A_txt",
    "decode_aarch32_instrs_VLD1_a_A1enc_A_txt",
    "decode_aarch32_instrs_VLD1_a_T1enc_A_txt",
    "decode_aarch32_instrs_VLD1_m_A1enc_A_txt",
    "decode_aarch32_instrs_VLD1_m_A2enc_A_txt",
    "decode_aarch32_instrs_VLD1_m_A3enc_A_txt",
    "decode_aarch32_instrs_VLD1_m_A4enc_A_txt",
    "decode_aarch32_instrs_VLD1_m_T1enc_A_txt",
    "decode_aarch32_instrs_VLD1_m_T2enc_A_txt",
    "decode_aarch32_instrs_VLD1_m_T3enc_A_txt",
    "decode_aarch32_instrs_VLD1_m_T4enc_A_txt",
    "decode_aarch32_instrs_VLD2_1_A1enc_A_txt",
    "decode_aarch32_instrs_VLD2_1_A2enc_A_txt",
    "decode_aarch32_instrs_VLD2_1_A3enc_A_txt",
    "decode_aarch32_instrs_VLD2_1_T1enc_A_txt",
    "decode_aarch32_instrs_VLD2_1_T2enc_A_txt",
    "decode_aarch32_instrs_VLD2_1_T3enc_A_txt",
    "decode_aarch32_instrs_VLD2_a_A1enc_A_txt",
    "decode_aarch32_instrs_VLD2_a_T1enc_A_txt",
    "decode_aarch32_instrs_VLD2_m_A1enc_A_txt",
    "decode_aarch32_instrs_VLD2_m_A2enc_A_txt",
    "decode_aarch32_instrs_VLD2_m_T1enc_A_txt",
    "decode_aarch32_instrs_VLD2_m_T2enc_A_txt",
    "decode_aarch32_instrs_VLD3_1_A1enc_A_txt",
    "decode_aarch32_instrs_VLD3_1_A2enc_A_txt",
    "decode_aarch32_instrs_VLD3_1_A3enc_A_txt",
    "decode_aarch32_instrs_VLD3_1_T1enc_A_txt",
    "decode_aarch32_instrs_VLD3_1_T2enc_A_txt",
    "decode_aarch32_instrs_VLD3_1_T3enc_A_txt",
    "decode_aarch32_instrs_VLD3_a_A1enc_A_txt",
    "decode_aarch32_instrs_VLD3_a_T1enc_A_txt",
    "decode_aarch32_instrs_VLD3_m_A1enc_A_txt",
    "decode_aarch32_instrs_VLD3_m_T1enc_A_txt",
    "decode_aarch32_instrs_VLD4_1_A1enc_A_txt",
    "decode_aarch32_instrs_VLD4_1_A2enc_A_txt",
    "decode_aarch32_instrs_VLD4_1_A3enc_A_txt",
    "decode_aarch32_instrs_VLD4_1_T1enc_A_txt",
    "decode_aarch32_instrs_VLD4_1_T2enc_A_txt",
    "decode_aarch32_instrs_VLD4_1_T3enc_A_txt",
    "decode_aarch32_instrs_VLD4_a_A1enc_A_txt",
    "decode_aarch32_instrs_VLD4_a_T1enc_A_txt",
    "decode_aarch32_instrs_VLD4_m_A1enc_A_txt",
    "decode_aarch32_instrs_VLD4_m_T1enc_A_txt",
    "decode_aarch32_instrs_VLDM_A1enc_A_txt",
    "decode_aarch32_instrs_VLDM_A2enc_A_txt",
    "decode_aarch32_instrs_VLDM_T1enc_A_txt",
    "decode_aarch32_instrs_VLDM_T2enc_A_txt",
    "decode_aarch32_instrs_VLDR_A1enc_A_txt",
    "decode_aarch32_instrs_VLDR_T1enc_A_txt",
    "TakePendingInterrupts",
    "TakeUnmaskedSErrorInterrupts",
    "TakeUnmaskedPhysicalSErrorInterrupts",
    "SetResetVector",
    "EncodePARange",
    "EncodeVARange",
    "ResetControlRegisters",
    "ResetExternalDebugRegisters",
    "TakeReset",
    "__InitSystem",
    "UnallocatedA32_Instruction",
    "UnallocatedT32_32_Instruction",
    "UnallocatedT32_16_Instruction",
    "__DefaultCond",
    "ExecuteA64", // remove me next
    "ExecuteA32",
    "ExecuteT32__1",
    "ExecuteT16",
    "ThisInstr",
    "__FetchInstr",
    "__TryDecodeExecute",
    "__DecodeExecute",
    "__CheckForEmulatorTermination",
    "__InstructionExecute",
    "__TopLevel",
    "__CycleEnd",
    "AccessDescriptor_to_Access_kind",
    "pa_bits",
    "sail_mem_read",
    "read_request",
    "sail_mem_write",
    "write_request",
    "CACHE_OP",
    "take_exception",
    "gic_readonly",
    "__ReadUART",
    "__WriteUART",
    "IsPhysicalSErrorPending",
    "ClearPendingPhysicalSError",
    "__UpdateSystemCounter",
    "SetInterruptRequestLevel",
    "DataMemoryBarrier",
    "DataSynchronizationBarrier",
    "InstructionSynchronizationBarrier",
    "SpeculationBarrier",
    "SupportedPowerTwoSVL",
    "PhysMemTagWrite",
    "PhysMemTagRead",
    "CreatePhysMemRetStatus",
    "PhysMemRead",
    "PhysMemWrite",
    "__EndCycle",
    "__ListConfig",
    "__Reset",
    "ActionRequired",
    "AddressSupportsLS64",
    "BPIALL",
    "BPIALLIS",
    "BPIMVA",
    "CP15DMB",
    "CP15DSB",
    "CP15ISB",
    "CPYPostSizeChoice",
    "CPYPreSizeChoice",
    "CPYSizeChoice",
    "CTI_SetEventLevel",
    "CTI_SignalEvent",
    "ChooseRandomNonExcludedTag",
    "CommitTransactionalWrites",
    "ComputePACIMPDEF",
    "DC_CIGDPAPA",
    "DC_CIPAPA",
    "DiscardTransactionalWrites",
    "EnterLowPowerState",
    "ErrorIsContained",
    "ErrorIsSynchronized",
    "FaultIsCorrected",
    "GPTTLBCache",
    "GPTTLBLookup",
    "GetAccumulatedFPExceptions",
    "GetCacheInfo",
    "GetLoadStoreType",
    "GetPendingPhysicalSError",
    "Hint_CLRBHB",
    "Hint_DGH",
    "Hint_Prefetch",
    "Hint_PreloadData",
    "Hint_PreloadDataForWrite",
    "Hint_PreloadInstr",
    "Hint_RangePrefetch",
    "Hint_Yield",
    "IsASEInstruction",
    "IsExternalAbortTakenSynchronously",
    "IsSynchronizablePhysicalSErrorPending",
    "LS64InstructionSyndrome",
    "LocalTimeoutEvent",
    "MarkExclusiveGlobal",
    "MarkExclusiveLocal",
    "MemCpyDirectionChoice",
    "MemCpyParametersIllformedE",
    "MemCpyParametersIllformedM",
    "MemCpyZeroSizeCheck",
    "MemSetParametersIllformedE",
    "MemSetParametersIllformedM",
    "MemSetZeroSizeCheck",
    "PendSErrorInterrupt",
    "ProfilingSynchronizationBarrier",
    "RemapRegsHaveResetValues",
    "ReportErrorAsIMPDEF",
    "ReportErrorAsUC",
    "ReportErrorAsUER",
    "ReportErrorAsUEU",
    "ReportErrorAsUncategorized",
    "ReportedPARAttrs",
    "ReportedPARShareability",
    "S1TLBCache",
    "S1TLBLookup",
    "S2TLBCache",
    "S2TLBLookup",
    "SETPostSizeChoice",
    "SETPreSizeChoice",
    "SETSizeChoice",
    "TLBIncludesGPT",
    "VirtualFIQPending",
    "VirtualIRQPending",
    "WaitForEventUntilDelay",
    "getNumBreakpoints",
    "getNumCtxBreakpoints",
    "getNumWatchpoints",
    "step_model",
    "main",
];
