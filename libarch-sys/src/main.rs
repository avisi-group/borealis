use {
    color_eyre::Result,
    libarch_sys::root::{
        captive::arch::arm64::{arm64_decode_decode, arm64_disasm_disassemble},
        new_decoder, new_disassembler,
    },
    std::ffi::{c_void, CStr},
};

fn main() -> Result<()> {
    color_eyre::install()?;

    let data = [
        0x1F, 0x20, 0x03, 0xD5, 0x1D, 0x00, 0x80, 0xD2, 0x1E, 0x00, 0x80, 0xD2, 0xE5, 0x03, 0x00,
        0xAA, 0xE1, 0x03, 0x40, 0xF9, 0xE2, 0x23, 0x00, 0x91, 0xE6, 0x03, 0x00, 0x91, 0x80, 0x00,
        0x00, 0x90, 0x00, 0xF8, 0x47, 0xF9, 0x03, 0x00, 0x80, 0xD2, 0x04, 0x00, 0x80, 0xD2, 0xD5,
        0xFF, 0xFF, 0x97, 0xE4, 0xFF, 0xFF, 0x97, 0x80, 0x00, 0x00, 0x90, 0x00, 0xF0, 0x47, 0xF9,
        0x40, 0x00, 0x00, 0xB4, 0xD8, 0xFF, 0xFF, 0x17, 0xC0, 0x03, 0x5F, 0xD6, 0x1F, 0x20, 0x03,
        0xD5, 0x1F, 0x20, 0x03, 0xD5, 0x80, 0x00, 0x00, 0xB0, 0x00, 0x40, 0x00, 0x91, 0x81, 0x00,
        0x00, 0xB0, 0x21, 0x40, 0x00, 0x91, 0x3F, 0x00, 0x00, 0xEB, 0xC0, 0x00, 0x00, 0x54, 0x81,
        0x00, 0x00, 0x90, 0x21, 0xE8, 0x47, 0xF9, 0x61, 0x00, 0x00, 0xB4, 0xF0, 0x03, 0x01, 0xAA,
        0x00, 0x02, 0x1F, 0xD6, 0xC0, 0x03, 0x5F, 0xD6, 0x80, 0x00, 0x00, 0xB0, 0x00, 0x40, 0x00,
        0x91, 0x81, 0x00, 0x00, 0xB0, 0x21, 0x40, 0x00, 0x91, 0x21, 0x00, 0x00, 0xCB, 0x22, 0xFC,
        0x7F, 0xD3, 0x41, 0x0C, 0x81, 0x8B, 0x21, 0xFC, 0x41, 0x93, 0xC1, 0x00, 0x00, 0xB4, 0x82,
        0x00, 0x00, 0x90, 0x42, 0xFC, 0x47, 0xF9, 0x62, 0x00, 0x00, 0xB4, 0xF0, 0x03, 0x02, 0xAA,
        0x00, 0x02, 0x1F, 0xD6, 0xC0, 0x03, 0x5F, 0xD6, 0x1F, 0x20, 0x03, 0xD5, 0xFD, 0x7B, 0xBE,
        0xA9, 0xFD, 0x03, 0x00, 0x91, 0xF3, 0x0B, 0x00, 0xF9, 0x93, 0x00, 0x00, 0xB0, 0x60, 0x42,
        0x40, 0x39, 0x40, 0x01, 0x00, 0x35, 0x80, 0x00, 0x00, 0x90, 0x00, 0xEC, 0x47, 0xF9, 0x80,
        0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0xB0, 0x00, 0x04, 0x40, 0xF9, 0xA9, 0xFF, 0xFF, 0x97,
        0xD8, 0xFF, 0xFF, 0x97, 0x20, 0x00, 0x80, 0x52, 0x60, 0x42, 0x00, 0x39, 0xF3, 0x0B, 0x40,
        0xF9, 0xFD, 0x7B, 0xC2, 0xA8, 0xC0, 0x03, 0x5F, 0xD6, 0x1F, 0x20, 0x03, 0xD5, 0x1F, 0x20,
        0x03, 0xD5, 0xDC, 0xFF, 0xFF, 0x17, 0xFD, 0x7B, 0xBC, 0xA9, 0xFD, 0x03, 0x00, 0x91, 0x80,
        0x00, 0x00, 0x90, 0x00, 0xF4, 0x47, 0xF9, 0x01, 0x00, 0x40, 0xF9, 0xE1, 0x1F, 0x00, 0xF9,
        0x01, 0x00, 0x80, 0xD2, 0x00, 0x00, 0x00, 0x90, 0x01, 0xC0, 0x23, 0x91, 0xE0, 0xA3, 0x00,
        0x91, 0x22, 0x00, 0x40, 0xF9, 0x02, 0x00, 0x00, 0xF9, 0x21, 0x50, 0x40, 0xF8, 0x01, 0x50,
        0x00, 0xF8, 0x00, 0x14, 0x80, 0x52, 0xE0, 0x1F, 0x00, 0xB9, 0xE1, 0x1F, 0x40, 0xB9, 0xE0,
        0x03, 0x01, 0x2A, 0x00, 0x70, 0x1D, 0x53, 0x00, 0x00, 0x01, 0x4B, 0xE0, 0x23, 0x00, 0xB9,
        0xE1, 0x1F, 0x40, 0xB9, 0xE0, 0x23, 0x40, 0xB9, 0x20, 0x08, 0xC0, 0x1A, 0xE0, 0x27, 0x00,
        0xB9, 0xE0, 0xA3, 0x00, 0x91, 0xA2, 0x01, 0x80, 0xD2, 0xE1, 0x03, 0x00, 0xAA, 0x00, 0x00,
        0x80, 0x52, 0x8A, 0xFF, 0xFF, 0x97, 0x00, 0x00, 0x80, 0x52, 0x78, 0xFF, 0xFF, 0x97,
    ];

    let decoder = unsafe { new_decoder() };
    let disassembler = unsafe { new_disassembler() };

    for chunk in data.chunks_exact(4) {
        unsafe { arm64_decode_decode(decoder as *mut c_void, 0, 0, &chunk[0]) };

        let str_ptr = unsafe {
            arm64_disasm_disassemble(disassembler as *mut c_void, 0, decoder as *const u8)
        };

        println!(
            "{:08X}: {:?}: {:?}",
            unsafe { std::mem::transmute::<_, &u32>(&chunk[0]) },
            unsafe { *decoder }.opcode,
            unsafe { CStr::from_ptr(str_ptr) }
        );
    }

    Ok(())
}
